name: Frontend CI (Daily @ 9AM IST)

on:
  push:
    branches: [main]
  schedule:
    - cron: "30 3 * * *" # 9AM IST
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag (for manual push)"
        required: true

env:
  DOCKER_IMAGE: allcognix/media-studio

jobs:
  # -------------------------------
  #  Daily Email Notification (Auto @ 9AM)
  # -------------------------------
  notify:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Send Daily CI Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: " AllCognix Frontend CI Report - ${{ github.repository }}"
          to: |
            anshul@allcognix.com,
            devops@allcognix.com,
            team@allcognix.com
          from: "AllCognix CI Bot <${{ secrets.EMAIL_USERNAME }}>"

          body: |
            Hello Team ,

            Here's your **Daily 9AM CI Summary** for **${{ github.repository }}**:

             Lint, Build, and Security checks running...
             Docker push available manually if required.
             Trigger Time: ${{ github.run_started_at }}

            ---
             Automated by AllCognix CI/CD Pipeline

  # -------------------------------
  #  Code Review (CodeRabbit)
  # -------------------------------
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: CodeRabbit Info
        run: |
          echo " CodeRabbit reviews PRs automatically once installed."
          echo " Visit https://coderabbit.ai to connect it to this repository."

  # -------------------------------
  #  Lint + Version Extraction
  # -------------------------------
  lint-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: get_version
        run: |
          echo " Checking directory structure..."
          ls -l
          INNER=$(basename "$GITHUB_REPOSITORY")
          if [ -d "$INNER" ]; then cd "$INNER"; fi
          PACKAGE_PATH=$(find . -type f -path "*/frontend/package.json" | head -1)
          if [ -z "$PACKAGE_PATH" ]; then echo " Could not find frontend/package.json"; exit 1; fi
          VERSION=$(jq -r '.version' "$PACKAGE_PATH")
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo " Invalid version format: $VERSION"; exit 1; fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "## Version from package.json: \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint (silent mode)
        working-directory: frontend
        run: |
          if npm run | grep -q "^ *lint"; then
            echo "ðŸ§¹ Running ESLint quietly..."
            npm run lint -- --quiet || echo " Lint warnings suppressed."
          else
            echo " No lint script found."
          fi

  # -------------------------------
  #  Build & Test
  # -------------------------------
  build-test:
    runs-on: ubuntu-latest
    needs: lint-version
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Create .env for Vite
        working-directory: frontend
        run: echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" > .env

      - name: Run tests
        working-directory: frontend
        run: |
          if npm run | grep -q "^ *test"; then
            npm test --if-present -- --ci --watchAll=false
          else
            echo " No test script found."
          fi

      - name: Build frontend
        working-directory: frontend
        run: |
          if npm run | grep -q "^ *build"; then
            npm run build
          else
            echo " No build script found."
          fi

  # -------------------------------
  #  Security: Snyk + Bandit
  # -------------------------------
  security:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: hashFiles('frontend/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps for Snyk
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: npm ci

      - name: Run Snyk Security Scan (cross-platform safe)
        if: hashFiles('frontend/package.json') != ''
        run: |
          cd frontend
          echo " Running Snyk in $(pwd)"
          rm -f package-lock.json
          npm install --ignore-scripts --package-lock-only
          npx snyk test --severity-threshold=medium || echo " Platform warnings ignored."
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Setup Python (for Bandit)
        if: hashFiles('**/*.py') != ''
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Bandit
        if: hashFiles('**/*.py') != ''
        run: pip install bandit

      - name: Run Bandit Security Scan
        if: hashFiles('**/*.py') != ''
        run: bandit -r . -ll

  # -------------------------------
  #  Manual Docker Build & Push
  # -------------------------------
  docker-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: [lint-version, build-test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo " Building image: $DOCKER_IMAGE:${TAG}"
          docker build -t $DOCKER_IMAGE:${TAG} frontend
          docker push $DOCKER_IMAGE:${TAG}
          echo " Docker image pushed: $DOCKER_IMAGE:${TAG}"
